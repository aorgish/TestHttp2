namespace TestHttp2.TestProtocols {

    public class Tls12Alpn : IProtocolTest {

        public int Port { get { return 443; } }

        public byte[] GetRequestBody(string host) { 
            return (new byte[] {
                    0x16,                     // Handsnake
                    0x03, 0x01,               // TLS 1.0
                    0x01, 0x7e,               // Packet Length
                    0x01,                     // Hello Client 
                    0x00, 0x01, 0x7a,         // Hello Client length
                    0x03, 0x03,               // TLS 1.2
                    0x59, 0x59, 0xfd, 0x22,   // Current unix time
                    0xf4, 0x84, 0xc9, 0x80, 0x92, 0xe2, 0xd8, 0xe3, 0x61, 0x6a, 0x70, 0xec, 0xe1, 0x29, 0xa0, 0x6a,  // Random bytes
                    0xc0, 0x7e, 0x3a, 0x0a, 0x1c, 0x2c, 0x05, 0x66, 0x0a, 0xe7, 0x6f, 0x4f, 
                    0x00,                     // Session Id Length
                    0x00, 0xb6,               // Chiper Suite Length
                    0xc0, 0x30, 0xc0, 0x2c, 0xc0, 0x28, 0xc0, 0x24, 0xc0, 0x14, 0xc0, 0x0a, 0x00, 0xa5, 0x00, 0xa3,  // Chiper Suite
                    0x00, 0xa1, 0x00, 0x9f, 0x00, 0x6b, 0x00, 0x6a, 0x00, 0x69, 0x00, 0x68, 0x00, 0x39, 0x00, 0x38, 
                    0x00, 0x37, 0x00, 0x36, 0x00, 0x88, 0x00, 0x87, 0x00, 0x86, 0x00, 0x85, 0xc0, 0x32, 0xc0, 0x2e, 
                    0xc0, 0x2a, 0xc0, 0x26, 0xc0, 0x0f, 0xc0, 0x05, 0x00, 0x9d, 0x00, 0x3d, 0x00, 0x35, 0x00, 0x84, 
                    0xc0, 0x2f, 0xc0, 0x2b, 0xc0, 0x27, 0xc0, 0x23, 0xc0, 0x13, 0xc0, 0x09, 0x00, 0xa4, 0x00, 0xa2, 
                    0x00, 0xa0, 0x00, 0x9e, 0x00, 0x67, 0x00, 0x40, 0x00, 0x3f, 0x00, 0x3e, 0x00, 0x33, 0x00, 0x32, 
                    0x00, 0x31, 0x00, 0x30, 0x00, 0x9a, 0x00, 0x99, 0x00, 0x98, 0x00, 0x97, 0x00, 0x45, 0x00, 0x44, 
                    0x00, 0x43, 0x00, 0x42, 0xc0, 0x31, 0xc0, 0x2d, 0xc0, 0x29, 0xc0, 0x25, 0xc0, 0x0e, 0xc0, 0x04, 
                    0x00, 0x9c, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x96, 0x00, 0x41, 0x00, 0x07, 0xc0, 0x11, 0xc0, 0x07, 
                    0xc0, 0x0c, 0xc0, 0x02, 0x00, 0x05, 0x00, 0x04, 0xc0, 0x12, 0xc0, 0x08, 0x00, 0x16, 0x00, 0x13, 
                    0x00, 0x10, 0x00, 0x0d, 0xc0, 0x0d, 0xc0, 0x03, 0x00, 0x0a, 0x00, 0x15, 0x00, 0x12, 0x00, 0x0f, 
                    0x00, 0x0c, 0x00, 0x09, 0x00, 0xff, 
                    0x01, 0x00,              // Compression Methods                
                    0x00, 0x9b,              // Extentions Length
                    0x00, 0x0b, 0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x3a, 0x00, 0x38, 0x00, 0x0e, // Various Extentions 
                    0x00, 0x0d, 0x00, 0x19, 0x00, 0x1c, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x1b, 0x00, 0x18, 0x00, 0x09, 
                    0x00, 0x0a, 0x00, 0x1a, 0x00, 0x16, 0x00, 0x17, 0x00, 0x08, 0x00, 0x06, 0x00, 0x07, 0x00, 0x14, 
                    0x00, 0x15, 0x00, 0x04, 0x00, 0x05, 0x00, 0x12, 0x00, 0x13, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 
                    0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 
                    0x06, 0x01, 0x06, 0x02, 0x06, 0x03, 0x05, 0x01, 0x05, 0x02, 0x05, 0x03, 0x04, 0x01, 0x04, 0x02, 
                    0x04, 0x03, 0x03, 0x01, 0x03, 0x02, 0x03, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x00, 0x0f, 
                    0x00, 0x01, 0x01, 0x33, 0x74, 0x00, 0x00, 
                    0x00, 0x10,             // ALPN Extention Ышптфегку 
                    0x00, 0x20,             // ALPN Length 
                    0x00, 0x1e,             // Extentions Length 
                    0x06, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x31,   // spdy/1
                    0x06, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x32,   // spdy/2
                    0x06, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x33,   // spdy/3
                    0x05, 0x68, 0x32, 0x2d, 0x31, 0x34,         // h2-14
                    0x02, 0x68, 0x32                            // h2
             }).SetCurrentTime(); 
        }

        public ProtocolTests TestResult(byte[] response, int length) {
            int alpnOff, alpnLen;
            var result = ProtocolTests.None;
            if (!response.GetTlsExtention(0x0010, out alpnOff, out alpnLen)) return result;
            result |= ProtocolTests.ALPN;
            alpnLen = (response[alpnOff] << 8) + response[alpnOff + 1];
            alpnOff += 2;
            result |= response.ExtractNpnProtocols(alpnOff, alpnLen);
            return result;
        }
    }

}
