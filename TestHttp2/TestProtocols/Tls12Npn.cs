namespace TestHttp2.TestProtocols {

    public class Tls12Npn : IProtocolTest {

        public int Port { get { return 443; } }

        public byte[] GetRequestBody(string host) { 
            return (new byte[] {
                    0x16,                      // Handsnake
                    0x03, 0x01,                // TLS 1.0
                    0x01, 0x5a,                // Packet Length
                    0x01,                      // Hello Client
                    0x00, 0x01, 0x56,          // Hello Client Length
                    0x03, 0x03,                // TLS 1.2 
                    0x21, 0x86, 0x38, 0x35,    // Current Unix Time
                    0xec, 0x91, 0x99, 0xf2, 0xf9, 0xe1, 0x63, 0x14, 0x5d, 0x5b, 0xa5, 0xcc, 0xf3, 0x6e, 0x3b, 0x42,   // Random bytes
                    0x19, 0x97, 0x02, 0x49, 0x00, 0x69, 0x5a, 0x21, 0x36, 0x21, 0x38, 0x51, 
                    0x00,                      // SessionId Length
                    0x00, 0xb6,                // Chiper Suite Length
                    0xc0, 0x30, 0xc0, 0x2c, 0xc0, 0x28, 0xc0, 0x24, 0xc0, 0x14, 0xc0, 0x0a, 0x00, 0xa5, 0x00, 0xa3, 
                    0x00, 0xa1, 0x00, 0x9f, 0x00, 0x6b, 0x00, 0x6a, 0x00, 0x69, 0x00, 0x68, 0x00, 0x39, 0x00, 0x38, 
                    0x00, 0x37, 0x00, 0x36, 0x00, 0x88, 0x00, 0x87, 0x00, 0x86, 0x00, 0x85, 0xc0, 0x32, 0xc0, 0x2e, 
                    0xc0, 0x2a, 0xc0, 0x26, 0xc0, 0x0f, 0xc0, 0x05, 0x00, 0x9d, 0x00, 0x3d, 0x00, 0x35, 0x00, 0x84, 
                    0xc0, 0x2f, 0xc0, 0x2b, 0xc0, 0x27, 0xc0, 0x23, 0xc0, 0x13, 0xc0, 0x09, 0x00, 0xa4, 0x00, 0xa2, 
                    0x00, 0xa0, 0x00, 0x9e, 0x00, 0x67, 0x00, 0x40, 0x00, 0x3f, 0x00, 0x3e, 0x00, 0x33, 0x00, 0x32, 
                    0x00, 0x31, 0x00, 0x30, 0x00, 0x9a, 0x00, 0x99, 0x00, 0x98, 0x00, 0x97, 0x00, 0x45, 0x00, 0x44, 
                    0x00, 0x43, 0x00, 0x42, 0xc0, 0x31, 0xc0, 0x2d, 0xc0, 0x29, 0xc0, 0x25, 0xc0, 0x0e, 0xc0, 0x04, 
                    0x00, 0x9c, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x96, 0x00, 0x41, 0x00, 0x07, 0xc0, 0x11, 0xc0, 0x07, 
                    0xc0, 0x0c, 0xc0, 0x02, 0x00, 0x05, 0x00, 0x04, 0xc0, 0x12, 0xc0, 0x08, 0x00, 0x16, 0x00, 0x13, 
                    0x00, 0x10, 0x00, 0x0d, 0xc0, 0x0d, 0xc0, 0x03, 0x00, 0x0a, 0x00, 0x15, 0x00, 0x12, 0x00, 0x0f, 
                    0x00, 0x0c, 0x00, 0x09, 0x00, 0xff, 
                    0x01, 0x00,                // Compression Method
                    0x00, 0x77,                // Extentions Length
                    0x00, 0x0b, 0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x3a, 0x00, 0x38, 0x00, 0x0e,  // Various Extentions
                    0x00, 0x0d, 0x00, 0x19, 0x00, 0x1c, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x1b, 0x00, 0x18, 0x00, 0x09, 
                    0x00, 0x0a, 0x00, 0x1a, 0x00, 0x16, 0x00, 0x17, 0x00, 0x08, 0x00, 0x06, 0x00, 0x07, 0x00, 0x14, 
                    0x00, 0x15, 0x00, 0x04, 0x00, 0x05, 0x00, 0x12, 0x00, 0x13, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 
                    0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 
                    0x06, 0x01, 0x06, 0x02, 0x06, 0x03, 0x05, 0x01, 0x05, 0x02, 0x05, 0x03, 0x04, 0x01, 0x04, 0x02, 
                    0x04, 0x03, 0x03, 0x01, 0x03, 0x02, 0x03, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x00, 0x0f, 
                    0x00, 0x01, 0x01, 
                    0x33, 0x74,               // NPN signature = Next Protocol Negotiation  
                    0x00, 0x00                // NPN Length
             }).SetCurrentTime(); 
        }

        public ProtocolTests TestResult(byte[] response, int length) {
            int npnOff, npnLen;
            var result = ProtocolTests.None;
            if (!response.GetTlsExtention(0x3374, out npnOff, out npnLen)) return result;
            result |= ProtocolTests.NPN | response.ExtractNpnProtocols(npnOff, npnLen);
            return result;
        }
    }


}
